
CREATE OR REPLACE package pkg_trip
 as
  err_code varchar2(200);err_msg varchar2(400);
  procedure save_customer_trip_request(p_req_id out varchar2,p_login_id in varchar2,p_location in varchar2,p_destination in varchar2,p_location_co_ord in varchar2,p_request_time in date,p_session_id in varchar2);
  procedure get_customer_trip_request(p_test_cursor out test_package.test_type);
  procedure book_customer_trip_request(p_result out varchar2,p_trip_request_id in number,p_login_id in varchar2,p_session_id in varchar2);
  procedure customer_trip_start(p_trip_id out varchar2,p_trip_request_id in number,
     p_customer_id in number,p_start_cord in varchar2,p_login_id in varchar2,p_session_id in varchar2);
  procedure customer_trip_running(p_test_cursor out test_package.test_type,p_login_id in varchar2);
  procedure customer_trip_end(p_is_end out varchar2,p_trip_id in number, p_total_distance in number,p_total_due in number,p_end_cord in varchar2,p_login_id in varchar2,p_session_id in varchar2);
   procedure get_biker_selected_trip(p_test_cursor out test_package.test_type,p_login_id in number);
   
  /* procedure customer_ride_start(p_session_id in varchar2,p_cust_id in varchar2,p_ride_source in varchar2,p_ride_destination in varchar2,p_driver_id in varchar2);
   procedure customer_ride_end(p_session_id in varchar2,p_cust_id in varchar2,p_ride_destination in varchar2,p_ride_distance in number);
   procedure get_all_pending_ride_req(p_test_cursor out TEST_PACKAGE.TEST_TYPE); */
end;




CREATE OR REPLACE package body pkg_trip
as
  procedure save_customer_trip_request(p_req_id out varchar2,p_login_id in varchar2,p_location in varchar2,p_destination in varchar2,p_location_co_ord in varchar2,p_request_time in date,p_session_id in varchar2)
     is
       v_trip_request_id number;v_customer_id number;
     begin
         select customer_id into v_customer_id 
             from t_customer
         where login_id=p_login_id;
         select nvl(max(trip_request_id),0)+1 into v_trip_request_id from t_trip_request;
         
         insert into t_trip_request values(v_trip_request_id,v_customer_id,0,p_location,p_destination,p_location_co_ord,p_request_time,1,0,sysdate,p_session_id,SYS_GUID());
         p_req_id:=v_trip_request_id;
         commit;
         EXCEPTION 
            when OTHERS then
                  rollback;
                  err_code:=SQLCODE;
                  err_msg:=substr(SQLERRM,1,300);
                  p_req_id:=0;
                  pkg_audit.save_errors('save_customer_trip_request',err_code,err_msg,p_login_id,p_session_id);
     end;


    procedure book_customer_trip_request(p_result out varchar2,p_trip_request_id in number,p_login_id in varchar2,p_session_id in varchar2)
     is
     v_biker_id number;
     begin
         select  biker_id into v_biker_id 
             from t_biker
         where login_id=p_login_id;
         update t_trip_request set biker_id=v_biker_id,is_reserved=1 where trip_request_id=p_trip_request_id ;
         p_result:='1';
         commit;

         EXCEPTION 
            when OTHERS then
                  rollback;
                  err_code:=SQLCODE;
                  err_msg:=substr(SQLERRM,1,300);
                 p_result:='0';
                  pkg_audit.save_errors('book_customer_trip_request',err_code,err_msg,p_login_id,p_session_id);
     end;


    procedure get_customer_trip_request(p_test_cursor out test_package.test_type)
     is
     
     begin
           open p_test_cursor for
               select r.location_co_ord location_co_ord,r.trip_request_id trip_request_id,r.customer_id customer_id,r.biker_id biker_id,c.first_name first_name,c.middle_name middle_name,c.last_name last_name,c.cell_phone cell_phone,c.email email ,r.location location,r.destination destination,r.request_time request_time
                       from t_trip_request r,t_customer c  where c.customer_id=r.customer_id and r.is_active=1 and r.date_added>= sysdate - 30/(24*60) and r.is_reserved=0 order by r.date_added desc;
    end;


/*
r.date_added>= sysdate - 5/(24*60)
  and trunc(r.date_added)<trunc(sysdate-30) 
  variable c refcursor;
  exec pkg_trip.get_biker_selected_trip(:c,39);
  print c;
*/

   procedure get_biker_selected_trip(p_test_cursor out test_package.test_type,p_login_id in number)
     is
     v_biker_id number;
     begin
         select  biker_id into v_biker_id 
             from t_biker
         where login_id=p_login_id;
           open p_test_cursor for
              select r.location_co_ord location_co_ord,r.trip_request_id trip_request_id, r.customer_id customer_id,r.biker_id biker_id,c.first_name first_name,c.middle_name middle_name,c.last_name last_name,c.cell_phone cell_phone,c.email email ,r.location location,r.destination destination,r.request_time request_time
                       from t_trip_request r,t_customer c 
             where r.customer_id=c.customer_id and r.is_active=1 and r.is_reserved=1 and r.biker_id=v_biker_id order by r.date_added desc;
    end;


   procedure customer_trip_start(p_trip_id out varchar2,p_trip_request_id in number,
       p_customer_id in number,p_start_cord in varchar2,p_login_id in varchar2,p_session_id in varchar2)
     is
     v_trip_id number;v_biker_id number;
     p_trip_code varchar2(300):='xyz';
     v_call_center_id varchar2(300):='123'; 
      begin
           select  biker_id into v_biker_id 
             from t_biker
           where login_id=p_login_id;

          select nvl(max(trip_id),0)+1 into v_trip_id from t_trip;
          insert into t_trip(trip_id,trip_request_id,trip_code,biker_id,customer_id,start_time,end_time,is_active,is_complete,date_added,row_id)
                  values(v_trip_id,p_trip_request_id,p_trip_code,v_biker_id,p_customer_id,sysdate,null,1,0,sysdate,SYS_GUID());

            select nvl(max(call_center_id),0)+1 into  v_call_center_id from t_call_center;
           insert into t_call_center(call_center_id,trip_id,biker_id,customer_id,start_time,end_time,is_active,is_complete,date_added,row_id) 
             values(v_call_center_id,v_trip_id,v_biker_id,p_customer_id,sysdate,null,1,0,sysdate,SYS_GUID());
           update t_trip_request set is_active=0 where trip_request_id=p_trip_request_id;
          p_trip_id:=v_trip_id;
          commit;
         EXCEPTION 
            when OTHERS then
                  rollback;
                  err_code:=SQLCODE;
                  err_msg:=substr(SQLERRM,1,300);
                  p_trip_id:='0';
                  pkg_audit.save_errors('customer_trip_start',err_code,err_msg,p_login_id,p_session_id);
     end;


 procedure customer_trip_running(p_test_cursor out test_package.test_type,p_login_id in varchar2)
  is
     v_biker_id number;
  begin
     select  biker_id into v_biker_id 
             from t_biker
      where login_id=p_login_id;

     open p_test_cursor for
              select r.location_co_ord location_co_ord,t.trip_id trip_id, r.customer_id customer_id,r.biker_id biker_id,c.first_name first_name,c.middle_name middle_name,c.last_name last_name,c.cell_phone cell_phone,c.email email ,
                     r.location location,r.destination destination,r.request_time request_time,t.start_time start_time
               from t_trip t, t_customer c,t_trip_request r
                where c.customer_id=t.customer_id and r.trip_request_id=t.trip_request_id  
                   and r.is_reserved=1 and t.is_complete=0 and t.is_active=1
                    and t.biker_id=v_biker_id order by r.date_added desc;
         commit;
         EXCEPTION 
            when OTHERS then
                  err_code:=SQLCODE;
                  err_msg:=substr(SQLERRM,1,300);
                  pkg_audit.save_errors('customer_trip_start',err_code,err_msg,p_login_id,'session');
     end;


 
  procedure customer_trip_end(p_is_end out varchar2,p_trip_id in number, p_total_distance in number,p_total_due in number,p_end_cord in varchar2,p_login_id in varchar2,p_session_id in varchar2)
     is
     v_billing_id  number;v_total_time number;
      begin
         update t_trip set end_time=sysdate,is_complete=1 where trip_id=p_trip_id;
         select sysdate-start_time into v_total_time from t_trip where trip_id=p_trip_id;
         select nvl(max(billing_id),0)+1 into v_billing_id from t_billing;
        insert into t_billing(billing_id,trip_id,total_distance,total_time,total_due,is_active,is_complete,date_added)
        values(v_billing_id,p_trip_id,p_total_distance,v_total_time,p_total_due,1,0,sysdate);
        p_is_end:='1';  
        commit;
         EXCEPTION 
            when OTHERS then
                  rollback;
                  err_code:=SQLCODE;
                  err_msg:=substr(SQLERRM,1,300);
                   p_is_end:='0';
                  pkg_audit.save_errors('customer_trip_end',err_code,err_msg,p_login_id,p_session_id);
  end;

/*
create table t_coords(
       co_ord_id number,  
       trip_id  number ,
       co_ord_seq number,
       time_instance date,
       date_added date,
       row_id RAW(16) default SYS_GUID(),  



        ride_destination=p_ride_destination,ride_distance=p_ride_distance,total_bill=900
      create table t_billing(
       billing_id number,
       trip_id  number, 
       total_distance inumber,
       total_time date,
       total_due decimal,
       is_active char(1),
       is_complete char(1),
       date_added date,
       row_id RAW(16) default SYS_GUID(), 
      constraint t_billing_pk primary key(billing_id),
      constraint t_billing_fk1 foregin key(trip_id) references t_trip(trip_id));



create table t_transaction(
       transaction_id  number,
       billing_id  number,
       trip_id  number,
       cc_id  number,
       transaction_code number,
       transaction_no varchar2(25),
       is_active char(1),
       is_approved char(1),
       completion_time date,
       date_added date,
       row_id RAW(16) default SYS_GUID(),
       constraint t_transaction_pk primary key(transaction_id),
       constraint t_transaction_fk1 foreign key(trip_id) references t_trip(trip_id),
       constraint t_transaction_fk2 foregin key(billing_id) references t_billing(billing_id),
       constraint t_transaction_fk3 foregin key(cc_id) references t_credit_card(cc_id));
       commit;
     end;
    

   procedure get_all_pending_ride_req(p_test_cursor out TEST_PACKAGE.TEST_TYPE)
     is
      begin
          open p_test_cursor for
            select * from T_CUST_REQ_REG where ride_status=0;
      end;

 
  procedure customer_ride_cancel(p_session_id in varchar2,p_cust_id in varchar2,p_ride_destination in varchar2,p_requested_ride_time in date)
     is
      begin
         update t_cust_req_reg set ride__time=sysdate,ride_status=1 where session_id=p_session_id and  p_cust_id=p_cust_id;
         commit;
     end;
   */
end;
